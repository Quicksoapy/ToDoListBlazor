@page "/"
@using ToDoList.Models
@using Task = ToDoList.Models.Task
<EditForm Model="@this" OnValidSubmit="OnValidSubmit"> 
    <label>Name:</label>
    <InputText @bind-Value="NewTaskName" /> 
    <label>Description:</label>
    <InputText @bind-Value="NewTaskDescription"></InputText>

    <button type="submit">Submit</button>
</EditForm> 

@foreach (var task in Tasks)
{
    <Task Id="@task.Id" Name="@task.Name" OnDelete="OnDeleteTask" OnDone="OnDoneTask"></Task>
}

@code
{
    [Inject] public AppDbContext AppDbContext { get; set; }
    
    public List<Task> Tasks { get; set; } = new();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadData();
    }
    
    private void LoadData()
    {
        Tasks = AppDbContext.Tasks.OrderBy(t => t.Id).ToList();
    }

    private void OnDeleteTask(int id)
    {
        Console.WriteLine("Delete has been triggered for id " + id);
        var task = AppDbContext.Tasks.FirstOrDefault(x => x.Id  == id);
        if(task != null){
            AppDbContext.RemoveRange(task);
            AppDbContext.SaveChanges();
        }
        LoadData();
    } 
    
    private void OnDoneTask(int id)
    {
        Console.WriteLine("Done has been triggered for id " + id);
        var task = AppDbContext.Tasks.FirstOrDefault(x => x.Id  == id);
        if(task != null)
        {
            task.IsDone = true;
            AppDbContext.SaveChanges();
        }
        LoadData();
    }

    public string NewTaskName { get; set; }
    public string NewTaskDescription { get; set; }

    private void OnValidSubmit()
    {
        AppDbContext.Tasks.Add(new Task()
        {
            Description = NewTaskDescription,
            IsDone = false,
            Name = NewTaskName
        });
        AppDbContext.SaveChanges();
        LoadData();
        InvokeAsync(StateHasChanged);
    }

}